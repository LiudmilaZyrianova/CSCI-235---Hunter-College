// Liudmila Zyrianova,CSCI 235, 02/27/2018, Programming Assignment 1, Problem 1:
/* Write a program to receive a set (in format of a sequence of numbers) and print all subsets of that set.
• The program must handle repetitive numbers. For example, if there are 5 \one"s in the input, it
should merge them to a single \one".
• If there is anything other than numbers in the input, it should print \ not a valid input".
• Assume all numbers in the input are integers (and less than memory of int).
• In output, print each subset in a separate line.
• The program should print ; in the rst line, and then should print subsets of size 1, then subsets
of size 2, and so on.
*/

#include <iostream>
#include <vector>
#include <cmath>

using namespace std;


vector<vector<int>> bigVector;      //Stores in bigVector[i] a set, which will be defined later.


void recursion(vector<int> v1)      //Recursively finds all of the subsets of the vector v1 and stores them in the bigVector.
{
	int k = v1.size();              //Length of v1
	if (k >= 2) {                   //If the length of v1 is greater 2
		int finalEl = v1[k - 1];        //The last element of v1
		int start = pow(2, (k - 1));        //The number of all subsets of a set, consisting of k-1 elements
		v1.pop_back();                      //Delete last element from v1
		recursion(v1);                      // Make recursion on v1

		for (int i = 0; i < start; i++) {
            vector<int> x = bigVector[i];       // Then in the cycle of length 2^(k-1) each time I make vector,
			x.push_back(finalEl);               // which is equals to bigVector[i]  with added finalEl in the end.
			bigVector[start + i] = x;           // And add this vector to the beginning of unfilled bigVector.
		}
	} else                                       //Just one element in the vector,
    {                                           // it mean that I need to create all subsets of set with one element.
		bigVector[1] = { 0,v1[0]};              //It is { {0} ,  {element} } .
	}

}

int main() {

    cout << "Print number of elements in the set, then print elements deviled by the Space" << '\n';        //Requests for correct input
    vector<int> v;

    int n;
    cin >> n;
    int s;
    for (int i=0; i<n; i++){                    //Reads the input, storing set as a vector v
        cin>>s;
        v.push_back(s);
    }


	vector<int> v0(1,0);                           //Vector v1 consisting of one 0
	for (int i = 0; i < (int)pow(2, v.size()); i++) {  //Eventually bigVector becomes 2^k subsets of "0"
		bigVector.push_back(v0);
	}


	recursion(v);           //Makes a recursion on v

	cout << "empty set" << endl;                                //Print out an empty set.
	for (int i = 1; i < (int)pow(2, v.size()); i++) {           //Print out the rest subsets. Each subset is printed in form {a1, a2, … an}.
		cout << "{";
		for (int j = 1; j < bigVector[i].size()-1; j++) {       //Ignore first "0", that's why j starts from 1.
			cout << bigVector[i][j] << ", ";
		}
		cout << bigVector[i][bigVector[i].size() - 1];
		cout <<"}"<< endl;
	}


    return 0;
}

